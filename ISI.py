import numpy as np

# Параметры моделирования
sampling_rate = 1000  # частота дискретизации в Hz
num_samples = 10000  # количество выборок
tau_values = np.arange(0, 100, 10)  # значения задержки, от 0 до 100 тактов
cyclic_prefix_length = 20  # длина циклического префикса в тех же единицах, что и tau

# Генерация случайного сигнала для примера (например, сигнал на приёмнике)
y = np.random.randn(num_samples) + 1j * np.random.randn(num_samples)  # комплексный сигнал


# Функция расчёта автокорреляции с учётом длины префикса
def autocorrelation(y, tau_values, cp_length):
    R_tau = []
    for tau in tau_values:
        # Сдвигаем сигнал и умножаем на комплексно-сопряжённый
        product = y[:num_samples - tau] * np.conj(y[tau:])
        R_tau_value = np.mean(product)  # Усреднение по времени
        R_tau.append(R_tau_value)

        # Оценка автокорреляции с учётом длины циклического префикса
        if np.abs(R_tau_value) > 0.7:
            print(f"Задержка {tau}: Высокая автокорреляция ({R_tau_value:.2f}). Многолучевое влияние минимально.")
        elif 0.3 < np.abs(R_tau_value) <= 0.7:
            if tau > cp_length:
                print(
                    f"Задержка {tau}: Средняя автокорреляция ({R_tau_value:.2f}), превышает длину префикса. Оптимизируйте CP.")
            else:
                print(
                    f"Задержка {tau}: Средняя автокорреляция ({R_tau_value:.2f}). Дополнительная настройка префикса не требуется.")
        else:
            if tau > cp_length:
                print(
                    f"Задержка {tau}: Низкая автокорреляция ({R_tau_value:.2f}), превышает длину префикса. Требуется увеличение CP.")
            else:
                print(
                    f"Задержка {tau}: Низкая автокорреляция ({R_tau_value:.2f}). Дополнительная настройка префикса не требуется.")

    return np.array(R_tau)


# Расчёт автокорреляционной функции и вывод интерпретации
R_tau = autocorrelation(y, tau_values, cyclic_prefix_length)

# Подведение итогов
print("\nОбщие рекомендации:")
if all(np.abs(R) > 0.7 for R in R_tau):
    print("Высокий уровень автокорреляции для всех значений τ. Многолучевой эффект минимален, ISI несущественен.")
elif any(0.3 < np.abs(R) <= 0.7 for R in R_tau):
    print("Умеренный многолучевой эффект для некоторых значений τ. Проверьте, что CP достаточен для минимизации ISI.")
else:
    print("Сильный многолучевой эффект и высокий ISI для нескольких значений τ. Увеличьте CP для улучшения передачи.")
